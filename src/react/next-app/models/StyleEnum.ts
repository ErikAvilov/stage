/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * * `abap` - abap
 * * `algol` - algol
 * * `algol_nu` - algol_nu
 * * `arduino` - arduino
 * * `autumn` - autumn
 * * `borland` - borland
 * * `bw` - bw
 * * `coffee` - coffee
 * * `colorful` - colorful
 * * `default` - default
 * * `dracula` - dracula
 * * `emacs` - emacs
 * * `friendly` - friendly
 * * `friendly_grayscale` - friendly_grayscale
 * * `fruity` - fruity
 * * `github-dark` - github-dark
 * * `gruvbox-dark` - gruvbox-dark
 * * `gruvbox-light` - gruvbox-light
 * * `igor` - igor
 * * `inkpot` - inkpot
 * * `lightbulb` - lightbulb
 * * `lilypond` - lilypond
 * * `lovelace` - lovelace
 * * `manni` - manni
 * * `material` - material
 * * `monokai` - monokai
 * * `murphy` - murphy
 * * `native` - native
 * * `nord` - nord
 * * `nord-darker` - nord-darker
 * * `one-dark` - one-dark
 * * `paraiso-dark` - paraiso-dark
 * * `paraiso-light` - paraiso-light
 * * `pastie` - pastie
 * * `perldoc` - perldoc
 * * `rainbow_dash` - rainbow_dash
 * * `rrt` - rrt
 * * `sas` - sas
 * * `solarized-dark` - solarized-dark
 * * `solarized-light` - solarized-light
 * * `staroffice` - staroffice
 * * `stata-dark` - stata-dark
 * * `stata-light` - stata-light
 * * `tango` - tango
 * * `trac` - trac
 * * `vim` - vim
 * * `vs` - vs
 * * `xcode` - xcode
 * * `zenburn` - zenburn
 * @export
 */
export const StyleEnum = {
    Abap: 'abap',
    Algol: 'algol',
    AlgolNu: 'algol_nu',
    Arduino: 'arduino',
    Autumn: 'autumn',
    Borland: 'borland',
    Bw: 'bw',
    Coffee: 'coffee',
    Colorful: 'colorful',
    Default: 'default',
    Dracula: 'dracula',
    Emacs: 'emacs',
    Friendly: 'friendly',
    FriendlyGrayscale: 'friendly_grayscale',
    Fruity: 'fruity',
    GithubDark: 'github-dark',
    GruvboxDark: 'gruvbox-dark',
    GruvboxLight: 'gruvbox-light',
    Igor: 'igor',
    Inkpot: 'inkpot',
    Lightbulb: 'lightbulb',
    Lilypond: 'lilypond',
    Lovelace: 'lovelace',
    Manni: 'manni',
    Material: 'material',
    Monokai: 'monokai',
    Murphy: 'murphy',
    Native: 'native',
    Nord: 'nord',
    NordDarker: 'nord-darker',
    OneDark: 'one-dark',
    ParaisoDark: 'paraiso-dark',
    ParaisoLight: 'paraiso-light',
    Pastie: 'pastie',
    Perldoc: 'perldoc',
    RainbowDash: 'rainbow_dash',
    Rrt: 'rrt',
    Sas: 'sas',
    SolarizedDark: 'solarized-dark',
    SolarizedLight: 'solarized-light',
    Staroffice: 'staroffice',
    StataDark: 'stata-dark',
    StataLight: 'stata-light',
    Tango: 'tango',
    Trac: 'trac',
    Vim: 'vim',
    Vs: 'vs',
    Xcode: 'xcode',
    Zenburn: 'zenburn'
} as const;
export type StyleEnum = typeof StyleEnum[keyof typeof StyleEnum];


export function instanceOfStyleEnum(value: any): boolean {
    for (const key in StyleEnum) {
        if (Object.prototype.hasOwnProperty.call(StyleEnum, key)) {
            if (StyleEnum[key as keyof typeof StyleEnum] === value) {
                return true;
            }
        }
    }
    return false;
}

export function StyleEnumFromJSON(json: any): StyleEnum {
    return StyleEnumFromJSONTyped(json, false);
}

export function StyleEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): StyleEnum {
    return json as StyleEnum;
}

export function StyleEnumToJSON(value?: StyleEnum | null): any {
    return value as any;
}

