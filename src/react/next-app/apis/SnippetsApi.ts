/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedSnippetList,
  PaginatedUserList,
  PatchedSnippet,
  Snippet,
  User,
} from '../models/index';
import {
    PaginatedSnippetListFromJSON,
    PaginatedSnippetListToJSON,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PatchedSnippetFromJSON,
    PatchedSnippetToJSON,
    SnippetFromJSON,
    SnippetToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface SnippetsCreateRequest {
    snippet: Omit<Snippet, 'id'|'created'>;
}

export interface SnippetsDestroyRequest {
    id: number;
}

export interface SnippetsFormattedCreateRequest {
    format: SnippetsFormattedCreateFormatEnum;
    snippet: Omit<Snippet, 'id'|'created'>;
}

export interface SnippetsFormattedDestroyRequest {
    format: SnippetsFormattedDestroyFormatEnum;
    id: number;
}

export interface SnippetsFormattedListRequest {
    format: SnippetsFormattedListFormatEnum;
    page?: number;
}

export interface SnippetsFormattedPartialUpdateRequest {
    format: SnippetsFormattedPartialUpdateFormatEnum;
    id: number;
    patchedSnippet?: Omit<PatchedSnippet, 'id'|'created'>;
}

export interface SnippetsFormattedRetrieveRequest {
    format: SnippetsFormattedRetrieveFormatEnum;
    id: number;
}

export interface SnippetsFormattedUpdateRequest {
    format: SnippetsFormattedUpdateFormatEnum;
    id: number;
    snippet: Omit<Snippet, 'id'|'created'>;
}

export interface SnippetsListRequest {
    page?: number;
}

export interface SnippetsPartialUpdateRequest {
    id: number;
    patchedSnippet?: Omit<PatchedSnippet, 'id'|'created'>;
}

export interface SnippetsRetrieveRequest {
    id: number;
}

export interface SnippetsUpdateRequest {
    id: number;
    snippet: Omit<Snippet, 'id'|'created'>;
}

export interface SnippetsUsersFormattedListRequest {
    format: SnippetsUsersFormattedListFormatEnum;
    page?: number;
}

export interface SnippetsUsersFormattedRetrieveRequest {
    format: SnippetsUsersFormattedRetrieveFormatEnum;
    id: number;
}

export interface SnippetsUsersListRequest {
    page?: number;
}

export interface SnippetsUsersRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class SnippetsApi extends runtime.BaseAPI {

    /**
     */
    async snippetsCreateRaw(requestParameters: SnippetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['snippet'] == null) {
            throw new runtime.RequiredError(
                'snippet',
                'Required parameter "snippet" was null or undefined when calling snippetsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SnippetToJSON(requestParameters['snippet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsCreate(requestParameters: SnippetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsDestroyRaw(requestParameters: SnippetsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async snippetsDestroy(requestParameters: SnippetsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.snippetsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async snippetsFormattedCreateRaw(requestParameters: SnippetsFormattedCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsFormattedCreate().'
            );
        }

        if (requestParameters['snippet'] == null) {
            throw new runtime.RequiredError(
                'snippet',
                'Required parameter "snippet" was null or undefined when calling snippetsFormattedCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SnippetToJSON(requestParameters['snippet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsFormattedCreate(requestParameters: SnippetsFormattedCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsFormattedCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsFormattedDestroyRaw(requestParameters: SnippetsFormattedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsFormattedDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsFormattedDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async snippetsFormattedDestroy(requestParameters: SnippetsFormattedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.snippetsFormattedDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async snippetsFormattedListRaw(requestParameters: SnippetsFormattedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSnippetList>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsFormattedList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSnippetListFromJSON(jsonValue));
    }

    /**
     */
    async snippetsFormattedList(requestParameters: SnippetsFormattedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSnippetList> {
        const response = await this.snippetsFormattedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsFormattedPartialUpdateRaw(requestParameters: SnippetsFormattedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsFormattedPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsFormattedPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSnippetToJSON(requestParameters['patchedSnippet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsFormattedPartialUpdate(requestParameters: SnippetsFormattedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsFormattedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsFormattedRetrieveRaw(requestParameters: SnippetsFormattedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsFormattedRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsFormattedRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsFormattedRetrieve(requestParameters: SnippetsFormattedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsFormattedRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsFormattedUpdateRaw(requestParameters: SnippetsFormattedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsFormattedUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsFormattedUpdate().'
            );
        }

        if (requestParameters['snippet'] == null) {
            throw new runtime.RequiredError(
                'snippet',
                'Required parameter "snippet" was null or undefined when calling snippetsFormattedUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SnippetToJSON(requestParameters['snippet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsFormattedUpdate(requestParameters: SnippetsFormattedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsFormattedUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsListRaw(requestParameters: SnippetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSnippetList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSnippetListFromJSON(jsonValue));
    }

    /**
     */
    async snippetsList(requestParameters: SnippetsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSnippetList> {
        const response = await this.snippetsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsPartialUpdateRaw(requestParameters: SnippetsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSnippetToJSON(requestParameters['patchedSnippet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsPartialUpdate(requestParameters: SnippetsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsRetrieveRaw(requestParameters: SnippetsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsRetrieve(requestParameters: SnippetsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsUpdateRaw(requestParameters: SnippetsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snippet>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsUpdate().'
            );
        }

        if (requestParameters['snippet'] == null) {
            throw new runtime.RequiredError(
                'snippet',
                'Required parameter "snippet" was null or undefined when calling snippetsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SnippetToJSON(requestParameters['snippet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetFromJSON(jsonValue));
    }

    /**
     */
    async snippetsUpdate(requestParameters: SnippetsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snippet> {
        const response = await this.snippetsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsUsersFormattedListRaw(requestParameters: SnippetsUsersFormattedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsUsersFormattedList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/users{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     */
    async snippetsUsersFormattedList(requestParameters: SnippetsUsersFormattedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.snippetsUsersFormattedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsUsersFormattedRetrieveRaw(requestParameters: SnippetsUsersFormattedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling snippetsUsersFormattedRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsUsersFormattedRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/users/{id}{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async snippetsUsersFormattedRetrieve(requestParameters: SnippetsUsersFormattedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.snippetsUsersFormattedRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsUsersListRaw(requestParameters: SnippetsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     */
    async snippetsUsersList(requestParameters: SnippetsUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.snippetsUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async snippetsUsersRetrieveRaw(requestParameters: SnippetsUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling snippetsUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snippets/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async snippetsUsersRetrieve(requestParameters: SnippetsUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.snippetsUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SnippetsFormattedCreateFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsFormattedCreateFormatEnum = typeof SnippetsFormattedCreateFormatEnum[keyof typeof SnippetsFormattedCreateFormatEnum];
/**
 * @export
 */
export const SnippetsFormattedDestroyFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsFormattedDestroyFormatEnum = typeof SnippetsFormattedDestroyFormatEnum[keyof typeof SnippetsFormattedDestroyFormatEnum];
/**
 * @export
 */
export const SnippetsFormattedListFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsFormattedListFormatEnum = typeof SnippetsFormattedListFormatEnum[keyof typeof SnippetsFormattedListFormatEnum];
/**
 * @export
 */
export const SnippetsFormattedPartialUpdateFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsFormattedPartialUpdateFormatEnum = typeof SnippetsFormattedPartialUpdateFormatEnum[keyof typeof SnippetsFormattedPartialUpdateFormatEnum];
/**
 * @export
 */
export const SnippetsFormattedRetrieveFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsFormattedRetrieveFormatEnum = typeof SnippetsFormattedRetrieveFormatEnum[keyof typeof SnippetsFormattedRetrieveFormatEnum];
/**
 * @export
 */
export const SnippetsFormattedUpdateFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsFormattedUpdateFormatEnum = typeof SnippetsFormattedUpdateFormatEnum[keyof typeof SnippetsFormattedUpdateFormatEnum];
/**
 * @export
 */
export const SnippetsUsersFormattedListFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsUsersFormattedListFormatEnum = typeof SnippetsUsersFormattedListFormatEnum[keyof typeof SnippetsUsersFormattedListFormatEnum];
/**
 * @export
 */
export const SnippetsUsersFormattedRetrieveFormatEnum = {
    Json: '.json'
} as const;
export type SnippetsUsersFormattedRetrieveFormatEnum = typeof SnippetsUsersFormattedRetrieveFormatEnum[keyof typeof SnippetsUsersFormattedRetrieveFormatEnum];
