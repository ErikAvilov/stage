/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Choice,
  PaginatedQuestionList,
  PatchedChoice,
  Question,
} from '../models/index';
import {
    ChoiceFromJSON,
    ChoiceToJSON,
    PaginatedQuestionListFromJSON,
    PaginatedQuestionListToJSON,
    PatchedChoiceFromJSON,
    PatchedChoiceToJSON,
    QuestionFromJSON,
    QuestionToJSON,
} from '../models/index';

export interface PollsFormattedListRequest {
    format: PollsFormattedListFormatEnum;
    page?: number;
}

export interface PollsFormattedRetrieveRequest {
    format: PollsFormattedRetrieveFormatEnum;
    questionId: number;
}

export interface PollsListRequest {
    page?: number;
}

export interface PollsRetrieveRequest {
    questionId: number;
}

export interface PollsVoteFormattedPartialUpdateRequest {
    format: PollsVoteFormattedPartialUpdateFormatEnum;
    questionId: number;
    patchedChoice?: Omit<PatchedChoice, 'id'>;
}

export interface PollsVoteFormattedUpdateRequest {
    format: PollsVoteFormattedUpdateFormatEnum;
    questionId: number;
    choice: Omit<Choice, 'id'>;
}

export interface PollsVotePartialUpdateRequest {
    questionId: number;
    patchedChoice?: Omit<PatchedChoice, 'id'>;
}

export interface PollsVoteUpdateRequest {
    questionId: number;
    choice: Omit<Choice, 'id'>;
}

/**
 * 
 */
export class PollsApi extends runtime.BaseAPI {

    /**
     */
    async pollsFormattedListRaw(requestParameters: PollsFormattedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQuestionList>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling pollsFormattedList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQuestionListFromJSON(jsonValue));
    }

    /**
     */
    async pollsFormattedList(requestParameters: PollsFormattedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQuestionList> {
        const response = await this.pollsFormattedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsFormattedRetrieveRaw(requestParameters: PollsFormattedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling pollsFormattedRetrieve().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling pollsFormattedRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{question_id}{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     */
    async pollsFormattedRetrieve(requestParameters: PollsFormattedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.pollsFormattedRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsListRaw(requestParameters: PollsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQuestionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQuestionListFromJSON(jsonValue));
    }

    /**
     */
    async pollsList(requestParameters: PollsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQuestionList> {
        const response = await this.pollsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsRetrieveRaw(requestParameters: PollsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling pollsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{question_id}/`.replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     */
    async pollsRetrieve(requestParameters: PollsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.pollsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsVoteFormattedPartialUpdateRaw(requestParameters: PollsVoteFormattedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Choice>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling pollsVoteFormattedPartialUpdate().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling pollsVoteFormattedPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{question_id}/vote{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedChoiceToJSON(requestParameters['patchedChoice']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceFromJSON(jsonValue));
    }

    /**
     */
    async pollsVoteFormattedPartialUpdate(requestParameters: PollsVoteFormattedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Choice> {
        const response = await this.pollsVoteFormattedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsVoteFormattedUpdateRaw(requestParameters: PollsVoteFormattedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Choice>> {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling pollsVoteFormattedUpdate().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling pollsVoteFormattedUpdate().'
            );
        }

        if (requestParameters['choice'] == null) {
            throw new runtime.RequiredError(
                'choice',
                'Required parameter "choice" was null or undefined when calling pollsVoteFormattedUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{question_id}/vote{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))).replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChoiceToJSON(requestParameters['choice']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceFromJSON(jsonValue));
    }

    /**
     */
    async pollsVoteFormattedUpdate(requestParameters: PollsVoteFormattedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Choice> {
        const response = await this.pollsVoteFormattedUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsVotePartialUpdateRaw(requestParameters: PollsVotePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Choice>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling pollsVotePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{question_id}/vote/`.replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedChoiceToJSON(requestParameters['patchedChoice']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceFromJSON(jsonValue));
    }

    /**
     */
    async pollsVotePartialUpdate(requestParameters: PollsVotePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Choice> {
        const response = await this.pollsVotePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pollsVoteUpdateRaw(requestParameters: PollsVoteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Choice>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling pollsVoteUpdate().'
            );
        }

        if (requestParameters['choice'] == null) {
            throw new runtime.RequiredError(
                'choice',
                'Required parameter "choice" was null or undefined when calling pollsVoteUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/polls/{question_id}/vote/`.replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChoiceToJSON(requestParameters['choice']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceFromJSON(jsonValue));
    }

    /**
     */
    async pollsVoteUpdate(requestParameters: PollsVoteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Choice> {
        const response = await this.pollsVoteUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PollsFormattedListFormatEnum = {
    Json: '.json'
} as const;
export type PollsFormattedListFormatEnum = typeof PollsFormattedListFormatEnum[keyof typeof PollsFormattedListFormatEnum];
/**
 * @export
 */
export const PollsFormattedRetrieveFormatEnum = {
    Json: '.json'
} as const;
export type PollsFormattedRetrieveFormatEnum = typeof PollsFormattedRetrieveFormatEnum[keyof typeof PollsFormattedRetrieveFormatEnum];
/**
 * @export
 */
export const PollsVoteFormattedPartialUpdateFormatEnum = {
    Json: '.json'
} as const;
export type PollsVoteFormattedPartialUpdateFormatEnum = typeof PollsVoteFormattedPartialUpdateFormatEnum[keyof typeof PollsVoteFormattedPartialUpdateFormatEnum];
/**
 * @export
 */
export const PollsVoteFormattedUpdateFormatEnum = {
    Json: '.json'
} as const;
export type PollsVoteFormattedUpdateFormatEnum = typeof PollsVoteFormattedUpdateFormatEnum[keyof typeof PollsVoteFormattedUpdateFormatEnum];
